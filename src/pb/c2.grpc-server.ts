// @generated by protobuf-ts 2.9.3 with parameter server_grpc1,long_type_string,generate_dependencies
// @generated from protobuf file "c2.proto" (package "c2", syntax proto3)
// tslint:disable
import { BuildImplantResponse } from "./c2";
import { BuildImplantRequest } from "./c2";
import { KeyxResponse } from "./c2";
import { KeyxRequest } from "./c2";
import { GetAgentsResponse } from "./c2";
import { GetAgentsRequest } from "./c2";
import type * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service c2.RedChannel
 */
export interface IRedChannel extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: GetAgents(c2.GetAgentsRequest) returns (c2.GetAgentsResponse);
     */
    getAgents: grpc.handleUnaryCall<GetAgentsRequest, GetAgentsResponse>;
    /**
     * @generated from protobuf rpc: Keyx(c2.KeyxRequest) returns (c2.KeyxResponse);
     */
    keyx: grpc.handleUnaryCall<KeyxRequest, KeyxResponse>;
    /**
     * @generated from protobuf rpc: BuildImplant(c2.BuildImplantRequest) returns (c2.BuildImplantResponse);
     */
    buildImplant: grpc.handleUnaryCall<BuildImplantRequest, BuildImplantResponse>;
}
/**
 * @grpc/grpc-js definition for the protobuf service c2.RedChannel.
 *
 * Usage: Implement the interface IRedChannel and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IRedChannel = ...
 * server.addService(redChannelDefinition, service);
 * ```
 */
export const redChannelDefinition: grpc.ServiceDefinition<IRedChannel> = {
    getAgents: {
        path: "/c2.RedChannel/GetAgents",
        originalName: "GetAgents",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetAgentsResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetAgentsRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetAgentsResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetAgentsRequest.toBinary(value))
    },
    keyx: {
        path: "/c2.RedChannel/Keyx",
        originalName: "Keyx",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => KeyxResponse.fromBinary(bytes),
        requestDeserialize: bytes => KeyxRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(KeyxResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(KeyxRequest.toBinary(value))
    },
    buildImplant: {
        path: "/c2.RedChannel/BuildImplant",
        originalName: "BuildImplant",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => BuildImplantResponse.fromBinary(bytes),
        requestDeserialize: bytes => BuildImplantRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(BuildImplantResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(BuildImplantRequest.toBinary(value))
    }
};
