// @generated by protobuf-ts 2.9.3 with parameter server_grpc1,long_type_string,generate_dependencies
// @generated from protobuf file "c2.proto" (package "c2", syntax proto3)
// tslint:disable
import { StreamLogResponse } from "./c2";
import { StreamLogRequest } from "./c2";
import { GetConfigResponse } from "./c2";
import { GetConfigRequest } from "./c2";
import { SetConfigResponse } from "./c2";
import { SetConfigRequest } from "./c2";
import { GetStaticDnsResponse } from "./c2";
import { GetStaticDnsRequest } from "./c2";
import { SetStaticDnsResponse } from "./c2";
import { SetStaticDnsRequest } from "./c2";
import { GenerateSkimmerPayloadResponse } from "./c2";
import { GenerateSkimmerPayloadRequest } from "./c2";
import { GenerateProxyPayloadResponse } from "./c2";
import { GenerateProxyPayloadRequest } from "./c2";
import { ForceFetchResponse } from "./c2";
import { ForceFetchRequest } from "./c2";
import { ProxyLoopResponse } from "./c2";
import { ProxyLoopRequest } from "./c2";
import { GetBuildLogResponse } from "./c2";
import { GetBuildLogRequest } from "./c2";
import { BuildImplantStreamResponse } from "./c2";
import { BuildImplantResponse } from "./c2";
import { BuildImplantRequest } from "./c2";
import { KillAgentResponse } from "./c2";
import { KillAgentRequest } from "./c2";
import { AgentCommandResponse } from "./c2";
import { AgentCommandRequest } from "./c2";
import { KeyxResponse } from "./c2";
import { KeyxRequest } from "./c2";
import { GetAgentsResponse } from "./c2";
import { GetAgentsRequest } from "./c2";
import { AuthenticateResponse } from "./c2";
import { AuthenticateRequest } from "./c2";
import type * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service c2.RedChannel
 */
export interface IRedChannel extends grpc.UntypedServiceImplementation {
    /**
     * @generated from protobuf rpc: Authenticate(c2.AuthenticateRequest) returns (c2.AuthenticateResponse);
     */
    authenticate: grpc.handleUnaryCall<AuthenticateRequest, AuthenticateResponse>;
    /**
     * @generated from protobuf rpc: GetAgents(c2.GetAgentsRequest) returns (c2.GetAgentsResponse);
     */
    getAgents: grpc.handleUnaryCall<GetAgentsRequest, GetAgentsResponse>;
    /**
     * @generated from protobuf rpc: Keyx(c2.KeyxRequest) returns (c2.KeyxResponse);
     */
    keyx: grpc.handleUnaryCall<KeyxRequest, KeyxResponse>;
    /**
     * @generated from protobuf rpc: AgentCommand(c2.AgentCommandRequest) returns (c2.AgentCommandResponse);
     */
    agentCommand: grpc.handleUnaryCall<AgentCommandRequest, AgentCommandResponse>;
    /**
     * @generated from protobuf rpc: KillAgent(c2.KillAgentRequest) returns (c2.KillAgentResponse);
     */
    killAgent: grpc.handleUnaryCall<KillAgentRequest, KillAgentResponse>;
    /**
     * @generated from protobuf rpc: BuildImplant(c2.BuildImplantRequest) returns (c2.BuildImplantResponse);
     */
    buildImplant: grpc.handleUnaryCall<BuildImplantRequest, BuildImplantResponse>;
    /**
     * @generated from protobuf rpc: BuildImplantStream(c2.BuildImplantRequest) returns (stream c2.BuildImplantStreamResponse);
     */
    buildImplantStream: grpc.handleServerStreamingCall<BuildImplantRequest, BuildImplantStreamResponse>;
    /**
     * @generated from protobuf rpc: GetBuildLog(c2.GetBuildLogRequest) returns (c2.GetBuildLogResponse);
     */
    getBuildLog: grpc.handleUnaryCall<GetBuildLogRequest, GetBuildLogResponse>;
    /**
     * @generated from protobuf rpc: ProxyLoop(c2.ProxyLoopRequest) returns (c2.ProxyLoopResponse);
     */
    proxyLoop: grpc.handleUnaryCall<ProxyLoopRequest, ProxyLoopResponse>;
    /**
     * @generated from protobuf rpc: ForceFetch(c2.ForceFetchRequest) returns (c2.ForceFetchResponse);
     */
    forceFetch: grpc.handleUnaryCall<ForceFetchRequest, ForceFetchResponse>;
    /**
     * @generated from protobuf rpc: GenerateProxyPayload(c2.GenerateProxyPayloadRequest) returns (c2.GenerateProxyPayloadResponse);
     */
    generateProxyPayload: grpc.handleUnaryCall<GenerateProxyPayloadRequest, GenerateProxyPayloadResponse>;
    /**
     * @generated from protobuf rpc: GenerateSkimmerPayload(c2.GenerateSkimmerPayloadRequest) returns (c2.GenerateSkimmerPayloadResponse);
     */
    generateSkimmerPayload: grpc.handleUnaryCall<GenerateSkimmerPayloadRequest, GenerateSkimmerPayloadResponse>;
    /**
     * @generated from protobuf rpc: SetStaticDns(c2.SetStaticDnsRequest) returns (c2.SetStaticDnsResponse);
     */
    setStaticDns: grpc.handleUnaryCall<SetStaticDnsRequest, SetStaticDnsResponse>;
    /**
     * @generated from protobuf rpc: GetStaticDns(c2.GetStaticDnsRequest) returns (c2.GetStaticDnsResponse);
     */
    getStaticDns: grpc.handleUnaryCall<GetStaticDnsRequest, GetStaticDnsResponse>;
    /**
     * @generated from protobuf rpc: SetConfig(c2.SetConfigRequest) returns (c2.SetConfigResponse);
     */
    setConfig: grpc.handleUnaryCall<SetConfigRequest, SetConfigResponse>;
    /**
     * @generated from protobuf rpc: GetConfig(c2.GetConfigRequest) returns (c2.GetConfigResponse);
     */
    getConfig: grpc.handleUnaryCall<GetConfigRequest, GetConfigResponse>;
    /**
     * @generated from protobuf rpc: StreamLog(c2.StreamLogRequest) returns (stream c2.StreamLogResponse);
     */
    streamLog: grpc.handleServerStreamingCall<StreamLogRequest, StreamLogResponse>;
}
/**
 * @grpc/grpc-js definition for the protobuf service c2.RedChannel.
 *
 * Usage: Implement the interface IRedChannel and add to a grpc server.
 *
 * ```typescript
 * const server = new grpc.Server();
 * const service: IRedChannel = ...
 * server.addService(redChannelDefinition, service);
 * ```
 */
export const redChannelDefinition: grpc.ServiceDefinition<IRedChannel> = {
    authenticate: {
        path: "/c2.RedChannel/Authenticate",
        originalName: "Authenticate",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => AuthenticateResponse.fromBinary(bytes),
        requestDeserialize: bytes => AuthenticateRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(AuthenticateResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(AuthenticateRequest.toBinary(value))
    },
    getAgents: {
        path: "/c2.RedChannel/GetAgents",
        originalName: "GetAgents",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetAgentsResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetAgentsRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetAgentsResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetAgentsRequest.toBinary(value))
    },
    keyx: {
        path: "/c2.RedChannel/Keyx",
        originalName: "Keyx",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => KeyxResponse.fromBinary(bytes),
        requestDeserialize: bytes => KeyxRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(KeyxResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(KeyxRequest.toBinary(value))
    },
    agentCommand: {
        path: "/c2.RedChannel/AgentCommand",
        originalName: "AgentCommand",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => AgentCommandResponse.fromBinary(bytes),
        requestDeserialize: bytes => AgentCommandRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(AgentCommandResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(AgentCommandRequest.toBinary(value))
    },
    killAgent: {
        path: "/c2.RedChannel/KillAgent",
        originalName: "KillAgent",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => KillAgentResponse.fromBinary(bytes),
        requestDeserialize: bytes => KillAgentRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(KillAgentResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(KillAgentRequest.toBinary(value))
    },
    buildImplant: {
        path: "/c2.RedChannel/BuildImplant",
        originalName: "BuildImplant",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => BuildImplantResponse.fromBinary(bytes),
        requestDeserialize: bytes => BuildImplantRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(BuildImplantResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(BuildImplantRequest.toBinary(value))
    },
    buildImplantStream: {
        path: "/c2.RedChannel/BuildImplantStream",
        originalName: "BuildImplantStream",
        requestStream: false,
        responseStream: true,
        responseDeserialize: bytes => BuildImplantStreamResponse.fromBinary(bytes),
        requestDeserialize: bytes => BuildImplantRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(BuildImplantStreamResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(BuildImplantRequest.toBinary(value))
    },
    getBuildLog: {
        path: "/c2.RedChannel/GetBuildLog",
        originalName: "GetBuildLog",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetBuildLogResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetBuildLogRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetBuildLogResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetBuildLogRequest.toBinary(value))
    },
    proxyLoop: {
        path: "/c2.RedChannel/ProxyLoop",
        originalName: "ProxyLoop",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => ProxyLoopResponse.fromBinary(bytes),
        requestDeserialize: bytes => ProxyLoopRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ProxyLoopResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(ProxyLoopRequest.toBinary(value))
    },
    forceFetch: {
        path: "/c2.RedChannel/ForceFetch",
        originalName: "ForceFetch",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => ForceFetchResponse.fromBinary(bytes),
        requestDeserialize: bytes => ForceFetchRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(ForceFetchResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(ForceFetchRequest.toBinary(value))
    },
    generateProxyPayload: {
        path: "/c2.RedChannel/GenerateProxyPayload",
        originalName: "GenerateProxyPayload",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GenerateProxyPayloadResponse.fromBinary(bytes),
        requestDeserialize: bytes => GenerateProxyPayloadRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GenerateProxyPayloadResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GenerateProxyPayloadRequest.toBinary(value))
    },
    generateSkimmerPayload: {
        path: "/c2.RedChannel/GenerateSkimmerPayload",
        originalName: "GenerateSkimmerPayload",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GenerateSkimmerPayloadResponse.fromBinary(bytes),
        requestDeserialize: bytes => GenerateSkimmerPayloadRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GenerateSkimmerPayloadResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GenerateSkimmerPayloadRequest.toBinary(value))
    },
    setStaticDns: {
        path: "/c2.RedChannel/SetStaticDns",
        originalName: "SetStaticDns",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => SetStaticDnsResponse.fromBinary(bytes),
        requestDeserialize: bytes => SetStaticDnsRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(SetStaticDnsResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(SetStaticDnsRequest.toBinary(value))
    },
    getStaticDns: {
        path: "/c2.RedChannel/GetStaticDns",
        originalName: "GetStaticDns",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetStaticDnsResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetStaticDnsRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetStaticDnsResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetStaticDnsRequest.toBinary(value))
    },
    setConfig: {
        path: "/c2.RedChannel/SetConfig",
        originalName: "SetConfig",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => SetConfigResponse.fromBinary(bytes),
        requestDeserialize: bytes => SetConfigRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(SetConfigResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(SetConfigRequest.toBinary(value))
    },
    getConfig: {
        path: "/c2.RedChannel/GetConfig",
        originalName: "GetConfig",
        requestStream: false,
        responseStream: false,
        responseDeserialize: bytes => GetConfigResponse.fromBinary(bytes),
        requestDeserialize: bytes => GetConfigRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(GetConfigResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(GetConfigRequest.toBinary(value))
    },
    streamLog: {
        path: "/c2.RedChannel/StreamLog",
        originalName: "StreamLog",
        requestStream: false,
        responseStream: true,
        responseDeserialize: bytes => StreamLogResponse.fromBinary(bytes),
        requestDeserialize: bytes => StreamLogRequest.fromBinary(bytes),
        responseSerialize: value => Buffer.from(StreamLogResponse.toBinary(value)),
        requestSerialize: value => Buffer.from(StreamLogRequest.toBinary(value))
    }
};
