// @generated by protobuf-ts 2.9.3 with parameter server_grpc1,long_type_string,generate_dependencies
// @generated from protobuf file "c2.proto" (package "c2", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { RedChannel } from "./c2";
import type { KeyxResponse } from "./c2";
import type { KeyxRequest } from "./c2";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { GetAgentsResponse } from "./c2";
import type { GetAgentsRequest } from "./c2";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service c2.RedChannel
 */
export interface IRedChannelClient {
    /**
     * @generated from protobuf rpc: GetAgents(c2.GetAgentsRequest) returns (c2.GetAgentsResponse);
     */
    getAgents(input: GetAgentsRequest, options?: RpcOptions): UnaryCall<GetAgentsRequest, GetAgentsResponse>;
    /**
     * @generated from protobuf rpc: Keyx(c2.KeyxRequest) returns (c2.KeyxResponse);
     */
    keyx(input: KeyxRequest, options?: RpcOptions): UnaryCall<KeyxRequest, KeyxResponse>;
}
/**
 * @generated from protobuf service c2.RedChannel
 */
export class RedChannelClient implements IRedChannelClient, ServiceInfo {
    typeName = RedChannel.typeName;
    methods = RedChannel.methods;
    options = RedChannel.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetAgents(c2.GetAgentsRequest) returns (c2.GetAgentsResponse);
     */
    getAgents(input: GetAgentsRequest, options?: RpcOptions): UnaryCall<GetAgentsRequest, GetAgentsResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<GetAgentsRequest, GetAgentsResponse>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Keyx(c2.KeyxRequest) returns (c2.KeyxResponse);
     */
    keyx(input: KeyxRequest, options?: RpcOptions): UnaryCall<KeyxRequest, KeyxResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<KeyxRequest, KeyxResponse>("unary", this._transport, method, opt, input);
    }
}
