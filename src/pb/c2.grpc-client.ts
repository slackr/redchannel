// @generated by protobuf-ts 2.9.3 with parameter client_grpc1,server_grpc1,long_type_string,generate_dependencies
// @generated from protobuf file "c2.proto" (package "c2", syntax proto3)
// tslint:disable
import { RedChannel } from "./c2";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { StreamLogResponse } from "./c2";
import type { StreamLogRequest } from "./c2";
import type { GetConfigResponse } from "./c2";
import type { GetConfigRequest } from "./c2";
import type { SetConfigResponse } from "./c2";
import type { SetConfigRequest } from "./c2";
import type { GetStaticDnsResponse } from "./c2";
import type { GetStaticDnsRequest } from "./c2";
import type { SetStaticDnsResponse } from "./c2";
import type { SetStaticDnsRequest } from "./c2";
import type { GenerateSkimmerPayloadResponse } from "./c2";
import type { GenerateSkimmerPayloadRequest } from "./c2";
import type { GenerateProxyPayloadResponse } from "./c2";
import type { GenerateProxyPayloadRequest } from "./c2";
import type { ForceFetchResponse } from "./c2";
import type { ForceFetchRequest } from "./c2";
import type { ProxyLoopResponse } from "./c2";
import type { ProxyLoopRequest } from "./c2";
import type { GetBuildLogResponse } from "./c2";
import type { GetBuildLogRequest } from "./c2";
import type { BuildImplantStreamResponse } from "./c2";
import type { BuildImplantResponse } from "./c2";
import type { BuildImplantRequest } from "./c2";
import type { OperatorChatResponse } from "./c2";
import type { OperatorChatRequest } from "./c2";
import type { AgentOutputResponse } from "./c2";
import type { AgentOutputRequest } from "./c2";
import type { KillAgentResponse } from "./c2";
import type { KillAgentRequest } from "./c2";
import type { AgentCommandResponse } from "./c2";
import type { AgentCommandRequest } from "./c2";
import type { KeyxResponse } from "./c2";
import type { KeyxRequest } from "./c2";
import type { GetAgentsResponse } from "./c2";
import type { GetAgentsRequest } from "./c2";
import type { AuthenticateResponse } from "./c2";
import type { AuthenticateRequest } from "./c2";
import * as grpc from "@grpc/grpc-js";
/**
 * @generated from protobuf service c2.RedChannel
 */
export interface IRedChannelClient {
    /**
     * @generated from protobuf rpc: Authenticate(c2.AuthenticateRequest) returns (c2.AuthenticateResponse);
     */
    authenticate(input: AuthenticateRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: AuthenticateResponse) => void): grpc.ClientUnaryCall;
    authenticate(input: AuthenticateRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: AuthenticateResponse) => void): grpc.ClientUnaryCall;
    authenticate(input: AuthenticateRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: AuthenticateResponse) => void): grpc.ClientUnaryCall;
    authenticate(input: AuthenticateRequest, callback: (err: grpc.ServiceError | null, value?: AuthenticateResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: GetAgents(c2.GetAgentsRequest) returns (c2.GetAgentsResponse);
     */
    getAgents(input: GetAgentsRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: GetAgentsResponse) => void): grpc.ClientUnaryCall;
    getAgents(input: GetAgentsRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: GetAgentsResponse) => void): grpc.ClientUnaryCall;
    getAgents(input: GetAgentsRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: GetAgentsResponse) => void): grpc.ClientUnaryCall;
    getAgents(input: GetAgentsRequest, callback: (err: grpc.ServiceError | null, value?: GetAgentsResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: Keyx(c2.KeyxRequest) returns (c2.KeyxResponse);
     */
    keyx(input: KeyxRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: KeyxResponse) => void): grpc.ClientUnaryCall;
    keyx(input: KeyxRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: KeyxResponse) => void): grpc.ClientUnaryCall;
    keyx(input: KeyxRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: KeyxResponse) => void): grpc.ClientUnaryCall;
    keyx(input: KeyxRequest, callback: (err: grpc.ServiceError | null, value?: KeyxResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: AgentCommand(c2.AgentCommandRequest) returns (c2.AgentCommandResponse);
     */
    agentCommand(input: AgentCommandRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: AgentCommandResponse) => void): grpc.ClientUnaryCall;
    agentCommand(input: AgentCommandRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: AgentCommandResponse) => void): grpc.ClientUnaryCall;
    agentCommand(input: AgentCommandRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: AgentCommandResponse) => void): grpc.ClientUnaryCall;
    agentCommand(input: AgentCommandRequest, callback: (err: grpc.ServiceError | null, value?: AgentCommandResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: KillAgent(c2.KillAgentRequest) returns (c2.KillAgentResponse);
     */
    killAgent(input: KillAgentRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: KillAgentResponse) => void): grpc.ClientUnaryCall;
    killAgent(input: KillAgentRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: KillAgentResponse) => void): grpc.ClientUnaryCall;
    killAgent(input: KillAgentRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: KillAgentResponse) => void): grpc.ClientUnaryCall;
    killAgent(input: KillAgentRequest, callback: (err: grpc.ServiceError | null, value?: KillAgentResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: AgentOutput(c2.AgentOutputRequest) returns (c2.AgentOutputResponse);
     */
    agentOutput(input: AgentOutputRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: AgentOutputResponse) => void): grpc.ClientUnaryCall;
    agentOutput(input: AgentOutputRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: AgentOutputResponse) => void): grpc.ClientUnaryCall;
    agentOutput(input: AgentOutputRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: AgentOutputResponse) => void): grpc.ClientUnaryCall;
    agentOutput(input: AgentOutputRequest, callback: (err: grpc.ServiceError | null, value?: AgentOutputResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: AgentOutputStream(c2.AgentOutputRequest) returns (stream c2.AgentOutputResponse);
     */
    agentOutputStream(input: AgentOutputRequest, metadata?: grpc.Metadata, options?: grpc.CallOptions): grpc.ClientReadableStream<AgentOutputResponse>;
    agentOutputStream(input: AgentOutputRequest, options?: grpc.CallOptions): grpc.ClientReadableStream<AgentOutputResponse>;
    /**
     * @generated from protobuf rpc: OperatorChat(stream c2.OperatorChatRequest) returns (stream c2.OperatorChatResponse);
     */
    operatorChat(metadata: grpc.Metadata, options?: grpc.CallOptions): grpc.ClientDuplexStream<OperatorChatRequest, OperatorChatResponse>;
    operatorChat(options?: grpc.CallOptions): grpc.ClientDuplexStream<OperatorChatRequest, OperatorChatResponse>;
    /**
     * @generated from protobuf rpc: BuildImplant(c2.BuildImplantRequest) returns (c2.BuildImplantResponse);
     */
    buildImplant(input: BuildImplantRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: BuildImplantResponse) => void): grpc.ClientUnaryCall;
    buildImplant(input: BuildImplantRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: BuildImplantResponse) => void): grpc.ClientUnaryCall;
    buildImplant(input: BuildImplantRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: BuildImplantResponse) => void): grpc.ClientUnaryCall;
    buildImplant(input: BuildImplantRequest, callback: (err: grpc.ServiceError | null, value?: BuildImplantResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: BuildImplantStream(c2.BuildImplantRequest) returns (stream c2.BuildImplantStreamResponse);
     */
    buildImplantStream(input: BuildImplantRequest, metadata?: grpc.Metadata, options?: grpc.CallOptions): grpc.ClientReadableStream<BuildImplantStreamResponse>;
    buildImplantStream(input: BuildImplantRequest, options?: grpc.CallOptions): grpc.ClientReadableStream<BuildImplantStreamResponse>;
    /**
     * @generated from protobuf rpc: GetBuildLog(c2.GetBuildLogRequest) returns (c2.GetBuildLogResponse);
     */
    getBuildLog(input: GetBuildLogRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: GetBuildLogResponse) => void): grpc.ClientUnaryCall;
    getBuildLog(input: GetBuildLogRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: GetBuildLogResponse) => void): grpc.ClientUnaryCall;
    getBuildLog(input: GetBuildLogRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: GetBuildLogResponse) => void): grpc.ClientUnaryCall;
    getBuildLog(input: GetBuildLogRequest, callback: (err: grpc.ServiceError | null, value?: GetBuildLogResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: ProxyLoop(c2.ProxyLoopRequest) returns (c2.ProxyLoopResponse);
     */
    proxyLoop(input: ProxyLoopRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ProxyLoopResponse) => void): grpc.ClientUnaryCall;
    proxyLoop(input: ProxyLoopRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: ProxyLoopResponse) => void): grpc.ClientUnaryCall;
    proxyLoop(input: ProxyLoopRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ProxyLoopResponse) => void): grpc.ClientUnaryCall;
    proxyLoop(input: ProxyLoopRequest, callback: (err: grpc.ServiceError | null, value?: ProxyLoopResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: ForceFetch(c2.ForceFetchRequest) returns (c2.ForceFetchResponse);
     */
    forceFetch(input: ForceFetchRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ForceFetchResponse) => void): grpc.ClientUnaryCall;
    forceFetch(input: ForceFetchRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: ForceFetchResponse) => void): grpc.ClientUnaryCall;
    forceFetch(input: ForceFetchRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: ForceFetchResponse) => void): grpc.ClientUnaryCall;
    forceFetch(input: ForceFetchRequest, callback: (err: grpc.ServiceError | null, value?: ForceFetchResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: GenerateProxyPayload(c2.GenerateProxyPayloadRequest) returns (c2.GenerateProxyPayloadResponse);
     */
    generateProxyPayload(input: GenerateProxyPayloadRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: GenerateProxyPayloadResponse) => void): grpc.ClientUnaryCall;
    generateProxyPayload(input: GenerateProxyPayloadRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: GenerateProxyPayloadResponse) => void): grpc.ClientUnaryCall;
    generateProxyPayload(input: GenerateProxyPayloadRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: GenerateProxyPayloadResponse) => void): grpc.ClientUnaryCall;
    generateProxyPayload(input: GenerateProxyPayloadRequest, callback: (err: grpc.ServiceError | null, value?: GenerateProxyPayloadResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: GenerateSkimmerPayload(c2.GenerateSkimmerPayloadRequest) returns (c2.GenerateSkimmerPayloadResponse);
     */
    generateSkimmerPayload(input: GenerateSkimmerPayloadRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: GenerateSkimmerPayloadResponse) => void): grpc.ClientUnaryCall;
    generateSkimmerPayload(input: GenerateSkimmerPayloadRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: GenerateSkimmerPayloadResponse) => void): grpc.ClientUnaryCall;
    generateSkimmerPayload(input: GenerateSkimmerPayloadRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: GenerateSkimmerPayloadResponse) => void): grpc.ClientUnaryCall;
    generateSkimmerPayload(input: GenerateSkimmerPayloadRequest, callback: (err: grpc.ServiceError | null, value?: GenerateSkimmerPayloadResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: SetStaticDns(c2.SetStaticDnsRequest) returns (c2.SetStaticDnsResponse);
     */
    setStaticDns(input: SetStaticDnsRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: SetStaticDnsResponse) => void): grpc.ClientUnaryCall;
    setStaticDns(input: SetStaticDnsRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: SetStaticDnsResponse) => void): grpc.ClientUnaryCall;
    setStaticDns(input: SetStaticDnsRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: SetStaticDnsResponse) => void): grpc.ClientUnaryCall;
    setStaticDns(input: SetStaticDnsRequest, callback: (err: grpc.ServiceError | null, value?: SetStaticDnsResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: GetStaticDns(c2.GetStaticDnsRequest) returns (c2.GetStaticDnsResponse);
     */
    getStaticDns(input: GetStaticDnsRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: GetStaticDnsResponse) => void): grpc.ClientUnaryCall;
    getStaticDns(input: GetStaticDnsRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: GetStaticDnsResponse) => void): grpc.ClientUnaryCall;
    getStaticDns(input: GetStaticDnsRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: GetStaticDnsResponse) => void): grpc.ClientUnaryCall;
    getStaticDns(input: GetStaticDnsRequest, callback: (err: grpc.ServiceError | null, value?: GetStaticDnsResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: SetConfig(c2.SetConfigRequest) returns (c2.SetConfigResponse);
     */
    setConfig(input: SetConfigRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: SetConfigResponse) => void): grpc.ClientUnaryCall;
    setConfig(input: SetConfigRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: SetConfigResponse) => void): grpc.ClientUnaryCall;
    setConfig(input: SetConfigRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: SetConfigResponse) => void): grpc.ClientUnaryCall;
    setConfig(input: SetConfigRequest, callback: (err: grpc.ServiceError | null, value?: SetConfigResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: GetConfig(c2.GetConfigRequest) returns (c2.GetConfigResponse);
     */
    getConfig(input: GetConfigRequest, metadata: grpc.Metadata, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: GetConfigResponse) => void): grpc.ClientUnaryCall;
    getConfig(input: GetConfigRequest, metadata: grpc.Metadata, callback: (err: grpc.ServiceError | null, value?: GetConfigResponse) => void): grpc.ClientUnaryCall;
    getConfig(input: GetConfigRequest, options: grpc.CallOptions, callback: (err: grpc.ServiceError | null, value?: GetConfigResponse) => void): grpc.ClientUnaryCall;
    getConfig(input: GetConfigRequest, callback: (err: grpc.ServiceError | null, value?: GetConfigResponse) => void): grpc.ClientUnaryCall;
    /**
     * @generated from protobuf rpc: StreamLog(c2.StreamLogRequest) returns (stream c2.StreamLogResponse);
     */
    streamLog(input: StreamLogRequest, metadata?: grpc.Metadata, options?: grpc.CallOptions): grpc.ClientReadableStream<StreamLogResponse>;
    streamLog(input: StreamLogRequest, options?: grpc.CallOptions): grpc.ClientReadableStream<StreamLogResponse>;
}
/**
 * @generated from protobuf service c2.RedChannel
 */
export class RedChannelClient extends grpc.Client implements IRedChannelClient {
    private readonly _binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions>;
    constructor(address: string, credentials: grpc.ChannelCredentials, options: grpc.ClientOptions = {}, binaryOptions: Partial<BinaryReadOptions & BinaryWriteOptions> = {}) {
        super(address, credentials, options);
        this._binaryOptions = binaryOptions;
    }
    /**
     * @generated from protobuf rpc: Authenticate(c2.AuthenticateRequest) returns (c2.AuthenticateResponse);
     */
    authenticate(input: AuthenticateRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: AuthenticateResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: AuthenticateResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: AuthenticateResponse) => void)): grpc.ClientUnaryCall {
        const method = RedChannel.methods[0];
        return this.makeUnaryRequest<AuthenticateRequest, AuthenticateResponse>(`/${RedChannel.typeName}/${method.name}`, (value: AuthenticateRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): AuthenticateResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: GetAgents(c2.GetAgentsRequest) returns (c2.GetAgentsResponse);
     */
    getAgents(input: GetAgentsRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: GetAgentsResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: GetAgentsResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: GetAgentsResponse) => void)): grpc.ClientUnaryCall {
        const method = RedChannel.methods[1];
        return this.makeUnaryRequest<GetAgentsRequest, GetAgentsResponse>(`/${RedChannel.typeName}/${method.name}`, (value: GetAgentsRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): GetAgentsResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: Keyx(c2.KeyxRequest) returns (c2.KeyxResponse);
     */
    keyx(input: KeyxRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: KeyxResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: KeyxResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: KeyxResponse) => void)): grpc.ClientUnaryCall {
        const method = RedChannel.methods[2];
        return this.makeUnaryRequest<KeyxRequest, KeyxResponse>(`/${RedChannel.typeName}/${method.name}`, (value: KeyxRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): KeyxResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: AgentCommand(c2.AgentCommandRequest) returns (c2.AgentCommandResponse);
     */
    agentCommand(input: AgentCommandRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: AgentCommandResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: AgentCommandResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: AgentCommandResponse) => void)): grpc.ClientUnaryCall {
        const method = RedChannel.methods[3];
        return this.makeUnaryRequest<AgentCommandRequest, AgentCommandResponse>(`/${RedChannel.typeName}/${method.name}`, (value: AgentCommandRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): AgentCommandResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: KillAgent(c2.KillAgentRequest) returns (c2.KillAgentResponse);
     */
    killAgent(input: KillAgentRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: KillAgentResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: KillAgentResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: KillAgentResponse) => void)): grpc.ClientUnaryCall {
        const method = RedChannel.methods[4];
        return this.makeUnaryRequest<KillAgentRequest, KillAgentResponse>(`/${RedChannel.typeName}/${method.name}`, (value: KillAgentRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): KillAgentResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: AgentOutput(c2.AgentOutputRequest) returns (c2.AgentOutputResponse);
     */
    agentOutput(input: AgentOutputRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: AgentOutputResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: AgentOutputResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: AgentOutputResponse) => void)): grpc.ClientUnaryCall {
        const method = RedChannel.methods[5];
        return this.makeUnaryRequest<AgentOutputRequest, AgentOutputResponse>(`/${RedChannel.typeName}/${method.name}`, (value: AgentOutputRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): AgentOutputResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: AgentOutputStream(c2.AgentOutputRequest) returns (stream c2.AgentOutputResponse);
     */
    agentOutputStream(input: AgentOutputRequest, metadata?: grpc.Metadata | grpc.CallOptions, options?: grpc.CallOptions): grpc.ClientReadableStream<AgentOutputResponse> {
        const method = RedChannel.methods[6];
        return this.makeServerStreamRequest<AgentOutputRequest, AgentOutputResponse>(`/${RedChannel.typeName}/${method.name}`, (value: AgentOutputRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): AgentOutputResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), options);
    }
    /**
     * @generated from protobuf rpc: OperatorChat(stream c2.OperatorChatRequest) returns (stream c2.OperatorChatResponse);
     */
    operatorChat(metadata?: grpc.Metadata | grpc.CallOptions, options?: grpc.CallOptions): grpc.ClientDuplexStream<OperatorChatRequest, OperatorChatResponse> {
        const method = RedChannel.methods[7];
        return this.makeBidiStreamRequest<OperatorChatRequest, OperatorChatResponse>(`/${RedChannel.typeName}/${method.name}`, (value: OperatorChatRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): OperatorChatResponse => method.O.fromBinary(value, this._binaryOptions), (metadata as any), options);
    }
    /**
     * @generated from protobuf rpc: BuildImplant(c2.BuildImplantRequest) returns (c2.BuildImplantResponse);
     */
    buildImplant(input: BuildImplantRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: BuildImplantResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: BuildImplantResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: BuildImplantResponse) => void)): grpc.ClientUnaryCall {
        const method = RedChannel.methods[8];
        return this.makeUnaryRequest<BuildImplantRequest, BuildImplantResponse>(`/${RedChannel.typeName}/${method.name}`, (value: BuildImplantRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): BuildImplantResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: BuildImplantStream(c2.BuildImplantRequest) returns (stream c2.BuildImplantStreamResponse);
     */
    buildImplantStream(input: BuildImplantRequest, metadata?: grpc.Metadata | grpc.CallOptions, options?: grpc.CallOptions): grpc.ClientReadableStream<BuildImplantStreamResponse> {
        const method = RedChannel.methods[9];
        return this.makeServerStreamRequest<BuildImplantRequest, BuildImplantStreamResponse>(`/${RedChannel.typeName}/${method.name}`, (value: BuildImplantRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): BuildImplantStreamResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), options);
    }
    /**
     * @generated from protobuf rpc: GetBuildLog(c2.GetBuildLogRequest) returns (c2.GetBuildLogResponse);
     */
    getBuildLog(input: GetBuildLogRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: GetBuildLogResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: GetBuildLogResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: GetBuildLogResponse) => void)): grpc.ClientUnaryCall {
        const method = RedChannel.methods[10];
        return this.makeUnaryRequest<GetBuildLogRequest, GetBuildLogResponse>(`/${RedChannel.typeName}/${method.name}`, (value: GetBuildLogRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): GetBuildLogResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: ProxyLoop(c2.ProxyLoopRequest) returns (c2.ProxyLoopResponse);
     */
    proxyLoop(input: ProxyLoopRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ProxyLoopResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ProxyLoopResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: ProxyLoopResponse) => void)): grpc.ClientUnaryCall {
        const method = RedChannel.methods[11];
        return this.makeUnaryRequest<ProxyLoopRequest, ProxyLoopResponse>(`/${RedChannel.typeName}/${method.name}`, (value: ProxyLoopRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): ProxyLoopResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: ForceFetch(c2.ForceFetchRequest) returns (c2.ForceFetchResponse);
     */
    forceFetch(input: ForceFetchRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ForceFetchResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: ForceFetchResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: ForceFetchResponse) => void)): grpc.ClientUnaryCall {
        const method = RedChannel.methods[12];
        return this.makeUnaryRequest<ForceFetchRequest, ForceFetchResponse>(`/${RedChannel.typeName}/${method.name}`, (value: ForceFetchRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): ForceFetchResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: GenerateProxyPayload(c2.GenerateProxyPayloadRequest) returns (c2.GenerateProxyPayloadResponse);
     */
    generateProxyPayload(input: GenerateProxyPayloadRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: GenerateProxyPayloadResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: GenerateProxyPayloadResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: GenerateProxyPayloadResponse) => void)): grpc.ClientUnaryCall {
        const method = RedChannel.methods[13];
        return this.makeUnaryRequest<GenerateProxyPayloadRequest, GenerateProxyPayloadResponse>(`/${RedChannel.typeName}/${method.name}`, (value: GenerateProxyPayloadRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): GenerateProxyPayloadResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: GenerateSkimmerPayload(c2.GenerateSkimmerPayloadRequest) returns (c2.GenerateSkimmerPayloadResponse);
     */
    generateSkimmerPayload(input: GenerateSkimmerPayloadRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: GenerateSkimmerPayloadResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: GenerateSkimmerPayloadResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: GenerateSkimmerPayloadResponse) => void)): grpc.ClientUnaryCall {
        const method = RedChannel.methods[14];
        return this.makeUnaryRequest<GenerateSkimmerPayloadRequest, GenerateSkimmerPayloadResponse>(`/${RedChannel.typeName}/${method.name}`, (value: GenerateSkimmerPayloadRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): GenerateSkimmerPayloadResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: SetStaticDns(c2.SetStaticDnsRequest) returns (c2.SetStaticDnsResponse);
     */
    setStaticDns(input: SetStaticDnsRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: SetStaticDnsResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: SetStaticDnsResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: SetStaticDnsResponse) => void)): grpc.ClientUnaryCall {
        const method = RedChannel.methods[15];
        return this.makeUnaryRequest<SetStaticDnsRequest, SetStaticDnsResponse>(`/${RedChannel.typeName}/${method.name}`, (value: SetStaticDnsRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): SetStaticDnsResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: GetStaticDns(c2.GetStaticDnsRequest) returns (c2.GetStaticDnsResponse);
     */
    getStaticDns(input: GetStaticDnsRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: GetStaticDnsResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: GetStaticDnsResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: GetStaticDnsResponse) => void)): grpc.ClientUnaryCall {
        const method = RedChannel.methods[16];
        return this.makeUnaryRequest<GetStaticDnsRequest, GetStaticDnsResponse>(`/${RedChannel.typeName}/${method.name}`, (value: GetStaticDnsRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): GetStaticDnsResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: SetConfig(c2.SetConfigRequest) returns (c2.SetConfigResponse);
     */
    setConfig(input: SetConfigRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: SetConfigResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: SetConfigResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: SetConfigResponse) => void)): grpc.ClientUnaryCall {
        const method = RedChannel.methods[17];
        return this.makeUnaryRequest<SetConfigRequest, SetConfigResponse>(`/${RedChannel.typeName}/${method.name}`, (value: SetConfigRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): SetConfigResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: GetConfig(c2.GetConfigRequest) returns (c2.GetConfigResponse);
     */
    getConfig(input: GetConfigRequest, metadata: grpc.Metadata | grpc.CallOptions | ((err: grpc.ServiceError | null, value?: GetConfigResponse) => void), options?: grpc.CallOptions | ((err: grpc.ServiceError | null, value?: GetConfigResponse) => void), callback?: ((err: grpc.ServiceError | null, value?: GetConfigResponse) => void)): grpc.ClientUnaryCall {
        const method = RedChannel.methods[18];
        return this.makeUnaryRequest<GetConfigRequest, GetConfigResponse>(`/${RedChannel.typeName}/${method.name}`, (value: GetConfigRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): GetConfigResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), (options as any), (callback as any));
    }
    /**
     * @generated from protobuf rpc: StreamLog(c2.StreamLogRequest) returns (stream c2.StreamLogResponse);
     */
    streamLog(input: StreamLogRequest, metadata?: grpc.Metadata | grpc.CallOptions, options?: grpc.CallOptions): grpc.ClientReadableStream<StreamLogResponse> {
        const method = RedChannel.methods[19];
        return this.makeServerStreamRequest<StreamLogRequest, StreamLogResponse>(`/${RedChannel.typeName}/${method.name}`, (value: StreamLogRequest): Buffer => Buffer.from(method.I.toBinary(value, this._binaryOptions)), (value: Buffer): StreamLogResponse => method.O.fromBinary(value, this._binaryOptions), input, (metadata as any), options);
    }
}
