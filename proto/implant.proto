syntax = "proto3";

package implant;

import "google/protobuf/wrappers.proto";

option go_package = "./implant";

enum AgentCommand {
  AGENT_COMMAND_UNSPECIFIED = 0;
  AGENT_COMMAND_CHECKIN = 1;
  AGENT_COMMAND_SYSINFO = 2;
  AGENT_COMMAND_EXECUTE = 3;
  AGENT_COMMAND_EXECUTE_SHELLCODE = 4;
  AGENT_COMMAND_MESSAGE = 5;
  AGENT_COMMAND_SHUTDOWN = 6;
  AGENT_COMMAND_KEYX = 7;
  AGENT_COMMAND_SET_CONFIG = 8;
  AGENT_COMMAND_IGNORE = 9;
}

enum C2Response {
  C2_RESPONSE_UNSPECIFIED = 0;
  C2_RESPONSE_NEED_MORE_DATA = 1;
  C2_RESPONSE_DATA_RECEIVED = 2;
  C2_RESPONSE_NOTHING_TO_DO = 3;
  C2_RESPONSE_ERROR_IMPORTING_KEY = 4;
  C2_RESPONSE_ERROR_DERIVING_SECRET = 5;
  C2_RESPONSE_ERROR_DECRYPTING_MESSAGE = 6;
  C2_RESPONSE_ERROR_GENERATING_KEYS = 7;
  C2_RESPONSE_ERROR_INVALID_MESSAGE = 8;
  C2_RESPONSE_ERROR_AGENT_UNKNOWN = 9;
  C2_RESPONSE_ERROR_CHECKING_IN = 10;
  C2_RESPONSE_ERROR_KEYX_NOT_ALLOWED = 11;
  C2_RESPONSE_ERROR_INVALID_SYSINFO = 12;
  C2_RESPONSE_ERROR_FAILED = 13;
}

enum AgentCommandStatus {
  AGENT_COMMAND_STATUS_UNSPECIFIED = 0;
  AGENT_COMMAND_STATUS_SUCCESS = 1;
  AGENT_COMMAND_STATUS_ERROR = 2;
}

message AgentConfig {
  string c2_domain = 1;
  string c2_password = 2;
  // google's proto wrappers allow us to check if the field exists, so we don't
  // accidentally use the default proto3 values for optional fields
  .google.protobuf.StringValue resolver = 3;
  .google.protobuf.UInt32Value c2_interval_ms = 4;
  .google.protobuf.BoolValue use_proxy_channel = 5;
  .google.protobuf.StringValue proxy_url = 6;
  .google.protobuf.StringValue proxy_key = 7;
  .google.protobuf.BoolValue throttle_sendq = 8;
}

message SysInfoData {
  string hostname = 1;
  repeated string ips = 2;
  string user = 3;
  string uid = 4;
  string gid = 5;
}

// c2 and agent communicate via Command messages
// Request message comes from the c2 and instructs the agent on what to do
// (command) with the input, along with any additional data, such as config in
// the event of a SET_CONFIG command
message CommandRequest {
  AgentCommand command = 1;
  bytes data = 2;
}
message CommandResponse {
  AgentCommand command = 1;
  bytes data = 2;
  AgentCommandStatus status = 3;
}