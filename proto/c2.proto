syntax = "proto3";

package c2;

import "implant.proto";
import "config.proto";

enum C2Command {
  C2_COMMAND_UNKNOWN = 0;
  C2_COMMAND_KEYX = 1;
  C2_COMMAND_GET_AGENTS = 2;
  C2_COMMAND_SET_CONFIG = 3;
}

enum CommandStatus {
  COMMAND_STATUS_UNKNOWN = 0;
  COMMAND_STATUS_SUCCESS = 1;
  COMMAND_STATUS_ERROR = 2;
  COMMAND_STATUS_ERROR_AUTH = 3;
}

enum C2Module {
  C2_MODULE_UNKNOWN = 0;
  C2_MODULE_C2 = 1;
  C2_MODULE_PROXY = 2;
  C2_MODULE_IMPLANT = 3;
  C2_MODULE_SKIMMER = 4;
  C2_MODULE_STATIC_DNS = 5;
}

enum AgentChannel {
  AGENT_CHANNEL_UNKNOWN = 0;
  AGENT_CHANNEL_DNS = 1;
  AGENT_CHANNEL_PROXY = 2;
}

enum ServerEvent {
  SERVER_EVENT_UNKNOWN = 0;
  SERVER_EVENT_CONNECTION = 1;
  SERVER_EVENT_DISCONNECT = 2;
  SERVER_EVENT_AUTH = 3;
  SERVER_EVENT_MESSAGE = 4;
  SERVER_EVENT_ERROR = 5;
}

message Agent {
  string agent_id = 1;
  bool has_pubkey = 2;
  uint32 lastseen = 3;
  repeated string ip = 4;
  uint32 sendq_size = 5;
  uint32 recvq_size = 6;
  implant.SysInfoData sysinfo = 7;
}

message GetAgentsRequest {}

message GetAgentsResponse {
  repeated Agent agents = 1;
  CommandStatus status = 2;
  string message = 3;
}

message KeyxRequest { string agent_id = 1; }
message KeyxResponse {
  CommandStatus status = 1;
  string message = 2;
}

message BuildImplantRequest {
  string os = 1;
  string arch = 2;
  bool debug = 3;
}
message BuildImplantResponse {
  CommandStatus status = 1;
  string output_file = 2;
  string message = 3;
}
message BuildImplantStreamResponse {
    LogLevel level = 1;
    string message = 2;
    CommandStatus status = 3;
}

message GetBuildLogRequest {}
message GetBuildLogResponse {
  CommandStatus status = 1;
  string message = 2;
  string log = 3;
}

message AgentCommandRequest {
  string agent_id = 1;
  implant.AgentCommand command = 2;
  string parameters = 3;
  ImplantModuleConfig implant_config = 4;
}
message AgentCommandResponse {
  CommandStatus status = 1;
  string message = 2;
}

message SetConfigRequest { UpdatedConfig config = 1; }
message SetConfigResponse {
  CommandStatus status = 1;
  string message = 2;
}

message GetConfigRequest {}
message GetConfigResponse {
  CommandStatus status = 1;
  string message = 2;
  RedChannelConfig config = 3;
}

enum LogLevel {
  LOG_LEVEL_DEBUG = 0;
  LOG_LEVEL_INFO = 1;
  LOG_LEVEL_WARN = 2;
  LOG_LEVEL_ERROR = 3;
}
message StreamLogRequest { LogLevel level = 1; }
message StreamLogResponse {
    CommandStatus status = 1;
    LogLevel level = 2;
    string message = 3;
}

message ProxyLoopRequest { bool start = 1; }
message ProxyLoopResponse {
  CommandStatus status = 1;
  string message = 2;
}
message ForceFetchRequest {}
message ForceFetchResponse {
  CommandStatus status = 1;
  string message = 2;
}
message GenerateProxyPayloadRequest {}
message GenerateProxyPayloadResponse {
  CommandStatus status = 1;
  string message = 2;
  string payload = 3;
}

message GenerateSkimmerPayloadRequest {}
message GenerateSkimmerPayloadResponse {
  CommandStatus status = 1;
  string message = 2;
  string payload = 3;
}

message KillAgentRequest { string agent_id = 1; }
message KillAgentResponse {
  CommandStatus status = 1;
  string message = 2;
}

enum StaticDnsAction {
  STATIC_DNS_ACTION_UNSPECIFIED = 0;
  STATIC_DNS_ACTION_ADD = 1;
  STATIC_DNS_ACTION_DELETE = 2;
  STATIC_DNS_ACTION_MODIFY = 3;
}
message SetStaticDnsRequest {
  StaticDnsAction action = 1;
  string hostname = 2;
  string ip = 3;
}
message SetStaticDnsResponse {
  CommandStatus status = 1;
  string message = 2;
}
message GetStaticDnsRequest {}
message GetStaticDnsResponse {
  CommandStatus status = 1;
  string message = 2;
}

message AuthenticateRequest {
  string operator = 1;
  string password = 2;
}
message AuthenticateResponse {
  CommandStatus status = 1;
  string message = 2;
  string token = 3;
}

message OperatorChatRequest { string message = 1; }
message OperatorChatResponse {
  CommandStatus status = 1;
  string message = 2;
}

message AgentOutputRequest { string agent_id = 1; }
message AgentOutputResponse {
  CommandStatus status = 1;
  string message = 2;
  repeated string output = 3;
}

service RedChannel {
  rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse);
  rpc GetAgents(GetAgentsRequest) returns (GetAgentsResponse);
  rpc Keyx(KeyxRequest) returns (KeyxResponse);
  rpc AgentCommand(AgentCommandRequest) returns (AgentCommandResponse);
  rpc KillAgent(KillAgentRequest) returns (KillAgentResponse);

  rpc AgentOutput(AgentOutputRequest) returns (AgentOutputResponse);
  rpc AgentOutputStream(AgentOutputRequest) returns (stream AgentOutputResponse);

  rpc OperatorChat(stream OperatorChatRequest)
      returns (stream OperatorChatResponse);

  rpc BuildImplant(BuildImplantRequest) returns (BuildImplantResponse);
  rpc BuildImplantStream(BuildImplantRequest)
      returns (stream BuildImplantStreamResponse);
  rpc GetBuildLog(GetBuildLogRequest) returns (GetBuildLogResponse);

  rpc ProxyLoop(ProxyLoopRequest) returns (ProxyLoopResponse);
  rpc ForceFetch(ForceFetchRequest) returns (ForceFetchResponse);
  rpc GenerateProxyPayload(GenerateProxyPayloadRequest)
      returns (GenerateProxyPayloadResponse);

  rpc GenerateSkimmerPayload(GenerateSkimmerPayloadRequest)
      returns (GenerateSkimmerPayloadResponse);

  rpc SetStaticDns(SetStaticDnsRequest) returns (SetStaticDnsResponse);
  rpc GetStaticDns(GetStaticDnsRequest) returns (GetStaticDnsResponse);

  rpc SetConfig(SetConfigRequest) returns (SetConfigResponse);
  rpc GetConfig(GetConfigRequest) returns (GetConfigResponse);

  rpc StreamLog(StreamLogRequest) returns (stream StreamLogResponse);
}